package tokens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// POSTTokensReader is a Reader for the POSTTokens structure.
type POSTTokensReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *POSTTokensReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPOSTTokensOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPOSTTokensOK creates a POSTTokensOK with default headers values
func NewPOSTTokensOK() *POSTTokensOK {
	return &POSTTokensOK{}
}

/*POSTTokensOK handles this case with default header values.

POSTTokensOK p o s t tokens o k
*/
type POSTTokensOK struct {
	Payload POSTTokensOKBody
}

func (o *POSTTokensOK) Error() string {
	return fmt.Sprintf("[POST /tokens][%d] pOSTTokensOK  %+v", 200, o.Payload)
}

func (o *POSTTokensOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*POSTTokensBody p o s t tokens body
swagger:model POSTTokensBody
*/
type POSTTokensBody struct {

	// a exp
	AExp int64 `json:"a_exp,omitempty"`

	// apellido
	Apellido string `json:"apellido,omitempty"`

	// correo electronico
	CorreoElectronico string `json:"correo_electronico,omitempty"`

	// cvv
	Cvv int64 `json:"cvv,omitempty"`

	// guardar
	Guardar bool `json:"guardar,omitempty"`

	// m exp
	MExp int64 `json:"m_exp,omitempty"`

	// nombre
	Nombre string `json:"nombre,omitempty"`

	// numero
	Numero int64 `json:"numero,omitempty"`
}

/*POSTTokensOKBody p o s t tokens o k body
swagger:model POSTTokensOKBody
*/
type POSTTokensOKBody struct {

	// correo electronico
	// Required: true
	CorreoElectronico *string `json:"correo_electronico"`

	// fecha creacion
	// Required: true
	FechaCreacion *int64 `json:"fecha_creacion"`

	// id
	// Required: true
	ID *string `json:"id"`

	// objeto
	// Required: true
	Objeto *string `json:"objeto"`

	// tarjeta
	// Required: true
	Tarjeta *POSTTokensOKBodyTarjeta `json:"tarjeta"`
}

// Validate validates this p o s t tokens o k body
func (o *POSTTokensOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCorreoElectronico(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateFechaCreacion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateObjeto(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateTarjeta(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *POSTTokensOKBody) validateCorreoElectronico(formats strfmt.Registry) error {

	if err := validate.Required("pOSTTokensOK"+"."+"correo_electronico", "body", o.CorreoElectronico); err != nil {
		return err
	}

	return nil
}

func (o *POSTTokensOKBody) validateFechaCreacion(formats strfmt.Registry) error {

	if err := validate.Required("pOSTTokensOK"+"."+"fecha_creacion", "body", o.FechaCreacion); err != nil {
		return err
	}

	return nil
}

func (o *POSTTokensOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("pOSTTokensOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *POSTTokensOKBody) validateObjeto(formats strfmt.Registry) error {

	if err := validate.Required("pOSTTokensOK"+"."+"objeto", "body", o.Objeto); err != nil {
		return err
	}

	return nil
}

func (o *POSTTokensOKBody) validateTarjeta(formats strfmt.Registry) error {

	if err := validate.Required("pOSTTokensOK"+"."+"tarjeta", "body", o.Tarjeta); err != nil {
		return err
	}

	if o.Tarjeta != nil {

		if err := o.Tarjeta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pOSTTokensOK" + "." + "tarjeta")
			}
			return err
		}
	}

	return nil
}

/*POSTTokensOKBodyTarjeta p o s t tokens o k body tarjeta
swagger:model POSTTokensOKBodyTarjeta
*/
type POSTTokensOKBodyTarjeta struct {

	// apellido
	Apellido string `json:"apellido,omitempty"`

	// bin
	Bin string `json:"bin,omitempty"`

	// marca
	Marca string `json:"marca,omitempty"`

	// nombre
	Nombre string `json:"nombre,omitempty"`

	// numero
	Numero string `json:"numero,omitempty"`
}

// Validate validates this p o s t tokens o k body tarjeta
func (o *POSTTokensOKBodyTarjeta) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
