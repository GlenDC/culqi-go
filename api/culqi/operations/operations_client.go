package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DELETESuscripcionID cancelars suscripción
*/
func (a *Client) DELETESuscripcionID(params *DELETESuscripcionIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDELETESuscripcionIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DELETE_suscripcion-id",
		Method:             "DELETE",
		PathPattern:        "/suscripcion/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DELETESuscripcionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GETCargosID consultars cargo

<p>Te permite consultar el los detalles de un cargo en específico.</p>

*/
func (a *Client) GETCargosID(params *GETCargosIDParams, authInfo runtime.ClientAuthInfoWriter) (*GETCargosIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGETCargosIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GET_cargos-id",
		Method:             "GET",
		PathPattern:        "/cargos/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GETCargosIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GETCargosIDOK), nil

}

/*
POSTCargosCargoIDDevolver devolvers cargo
*/
func (a *Client) POSTCargosCargoIDDevolver(params *POSTCargosCargoIDDevolverParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPOSTCargosCargoIDDevolverParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "POST_cargos-cargoId-devolver",
		Method:             "POST",
		PathPattern:        "/cargos/{cargoId}/devolver",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &POSTCargosCargoIDDevolverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
